/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Agora's OP API (Beta)
 * Welcome to the Collective API documentation. This API provides various endpoints to interact with the Collective platform, focusing on RetroPGF (Retroactive Public Goods Funding) for Optimism. Below is a comprehensive guide to the API endpoints, categorized by functionality.

### Current Status
- **Beta**: This API is currently in beta. Endpoints marked as "Not Live" are under development and available for feedback only.

### API Categories
Live and stable. 
- **auth**: Authenticate with the Agora API
- **Round 4**: Data related to Retro Funding for Optimism Round 4
- **RetroFunding**: Data related to Retro Funding for Optimism Round 4 and beyond
- **projects**: Data related to RetroPGF Projects
- **RetroFundingRounds**: Data related to RetroPGF Funding Rounds
- **RetroFundingBallots**: Data related to RetroPGF Funding Ballots
- **impactMetrics**: Data related to the Impact Metrics for RetroFunding Round 4
- **RetroFundingImpactMetrics**: Connect RetroPGF to Impact Metrics
- **comments**: Data related to RetroPGF Project Comments
- **commentsVotes**: Data related to RetroPGF Project Comments' Votes
- **delegates**: Delegates data
- **delegations**: Delegations data
- **proposals**: Proposal data
- **votes**: Vote data
- **contracts**: Data for the current onchain contracts
- **projects** Round 5 Projects with mock data
- **RetroFundingBallots** Round 5 Ballots with mock data

Not Live.
- **Round 5**: Data related to Retro Funding for Optimism Round 5
- 0.2.2: **DistributionStrategies** Round 5 Distribution strategies with mock data
- 0.2.3: Round 5 Production release with real data

### Release Schedule

| Version  | Status  | Release Date  |
|----------|---------|---------------|
| OP 0.1.0 | LIVE   | June 7th |
| OP 0.1.1 | LIVE   | June 27th |
| OP 0.1.2 | LIVE   | July 22th |
| OP 0.1.3 | LIVE   | July 31th |
|----------|---------|---------------|
| OP 0.2.0 | LIVE   | Aug 10th |
| OP 0.2.1 | LIVE   | Aug 26th |
| OP 0.2.2 | LIVE   | Sep 4th |
| OP 0.2.3 | ON TRACK   | Sep 20th |
 * OpenAPI spec version: 0.2.1
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import {
  RetroFundingRoundStatus,
  VoteSupport,
  VotingStrategy,
} from "./agora.schemas";
import type {
  ApprovalProposalData,
  ApprovalProposalResults,
  AuthToken,
  Comment,
  CommentVote,
  Contract,
  Delegate,
  Delegation,
  GetDelegateVotes200,
  GetDelegates200,
  GetDelegatorsByAddress200,
  GetImpactMetricComments200,
  GetProjects200,
  GetProposalVotes200,
  GetProposals200,
  GetRetroFundingRoundBallotById200,
  GetRetroFundingRoundProjects200,
  GetRetroFundingRounds200,
  OptimisticProposalData,
  OptimisticProposalResults,
  Project,
  Proposal,
  RecordImpactMetricView200,
  RetroFundingImpactMetric,
  RetroFundingRound,
  Round4Ballot,
  Round5Ballot,
  SnapshotProposalData,
  SnapshotProposalResults,
  StandardProposalData,
  StandardProposalResults,
  SubmitRetroFundingBallot200,
  VotingToken,
} from "./agora.schemas";

export const getGetSpecResponseMock = (): string => faker.word.sample();

export const getGetNonceResponseMock = (): string => faker.word.sample();

export const getPostSiweVerificationMessageResponseMock = (
  overrideResponse: Partial<AuthToken> = {},
): AuthToken => ({
  access_token: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  expires_in: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  token_type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetDelegatesResponseMock = (
  overrideResponse: Partial<GetDelegates200> = {},
): GetDelegates200 => ({
  data: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      isCitizen: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      statement: faker.helpers.arrayElement([
        {
          discord: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          statement: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          topIssues: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              value: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          twitter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          warpcast: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        },
        undefined,
      ]),
      votingPower: faker.helpers.arrayElement([
        {
          advanced: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          direct: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          total: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDelegateByAddressResponseMock = (
  overrideResponse: Partial<Delegate> = {},
): Delegate => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  isCitizen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  lastTenProps: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  numOfDelegators: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  proposalsCreated: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  proposalsVotedOn: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  statement: faker.helpers.arrayElement([
    {
      discord: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      statement: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      topIssues: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
      twitter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      warpcast: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  votedAbstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  votedAgainst: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  votedFor: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  votingParticipation: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  votingPower: faker.helpers.arrayElement([
    {
      advanced: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      direct: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      total: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  votingPowerRelativeToQuorum: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  votingPowerRelativeToVotableSupply: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDelegateVotesResponseMock = (
  overrideResponse: Partial<GetDelegateVotes200> = {},
): GetDelegateVotes200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      params: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      proposalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      proposalTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      proposalType: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "STANDARD",
          "APPROVAL",
          "OPTIMISTIC",
          "SNAPSHOT",
        ] as const),
        undefined,
      ]),
      proposalValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      reason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      support: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VoteSupport)),
        undefined,
      ]),
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      transactionHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      weight: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetProposalsResponseSnapshotProposalDataMock = (
  overrideResponse: Partial<SnapshotProposalData> = {},
): SnapshotProposalData => ({
  ...{
    createdTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    endTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    link: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    scores: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    startTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    state: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["ACTIVE", "CLOSED", "PENDING"] as const),
      undefined,
    ]),
    title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    votes: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseStandardProposalDataMock = (
  overrideResponse: Partial<StandardProposalData> = {},
): StandardProposalData => ({
  ...{
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        executionData: faker.helpers.arrayElement([
          {
            budgetTokensSpent: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            calldata: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            description: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            functionArgsName: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                functionArgs: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => faker.word.sample()),
                  undefined,
                ]),
                functionName: faker.helpers.arrayElement([
                  faker.word.sample(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            signatures: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            targets: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            values: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseApprovalProposalDataMock = (
  overrideResponse: Partial<ApprovalProposalData> = {},
): ApprovalProposalData => ({
  ...{
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        budgetTokensSpent: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        executionData: faker.helpers.arrayElement([
          {
            budgetTokensSpent: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            calldata: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            description: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            functionArgsName: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                functionArgs: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => faker.word.sample()),
                  undefined,
                ]),
                functionName: faker.helpers.arrayElement([
                  faker.word.sample(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            signatures: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            targets: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            values: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
    proposalSettings: faker.helpers.arrayElement([
      {
        budgetAmount: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        budgetToken: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        criteria: faker.helpers.arrayElement([
          faker.helpers.arrayElement(["THRESHOLD", "TOP_CHOICES"] as const),
          undefined,
        ]),
        criteriaValue: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        maxApprovals: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      },
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseOptimisticProposalDataMock = (
  overrideResponse: Partial<OptimisticProposalData> = {},
): OptimisticProposalData => ({
  ...{
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    executionData: faker.helpers.arrayElement([
      {
        budgetTokensSpent: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        calldata: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        functionArgsName: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            functionArgs: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            functionName: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        signatures: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        targets: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        values: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
      },
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseSnapshotProposalResultsMock = (
  overrideResponse: Partial<SnapshotProposalResults> = {},
): SnapshotProposalResults => ({
  ...{
    scores: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["pending", "active", "closed"] as const),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseStandardProposalResultsMock = (
  overrideResponse: Partial<StandardProposalResults> = {},
): StandardProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseApprovalProposalResultsMock = (
  overrideResponse: Partial<ApprovalProposalResults> = {},
): ApprovalProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    criteria: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["THRESHOLD", "TOP_CHOICES"] as const),
      undefined,
    ]),
    criteriaValue: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        option: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        votes: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      })),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseOptimisticProposalResultsMock = (
  overrideResponse: Partial<OptimisticProposalResults> = {},
): OptimisticProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  },
  ...overrideResponse,
});

export const getGetProposalsResponseMock = (
  overrideResponse: Partial<GetProposals200> = {},
): GetProposals200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  proposals: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      approvalThreshold: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cancelledTime: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      cancelledTransactionHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      createdTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      createdTransactionHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      endTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      executedTime: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      executedTransactionHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      markdowntitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      proposalData: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          { ...getGetProposalsResponseSnapshotProposalDataMock() },
          { ...getGetProposalsResponseStandardProposalDataMock() },
          { ...getGetProposalsResponseApprovalProposalDataMock() },
          { ...getGetProposalsResponseOptimisticProposalDataMock() },
        ]),
        undefined,
      ]),
      proposalResults: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          { ...getGetProposalsResponseSnapshotProposalResultsMock() },
          { ...getGetProposalsResponseStandardProposalResultsMock() },
          { ...getGetProposalsResponseApprovalProposalResultsMock() },
          { ...getGetProposalsResponseOptimisticProposalResultsMock() },
        ]),
        undefined,
      ]),
      proposalTemplate: faker.helpers.arrayElement([
        {
          approvalThreshold: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          contractAddress: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          createBlock: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          proposalTemplateId: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          quorum: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          votingStrategy: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(VotingStrategy)),
            undefined,
          ]),
        },
        undefined,
      ]),
      proposalType: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "STANDARD",
          "APPROVAL",
          "OPTIMISTIC",
          "SNAPSHOT",
        ] as const),
        undefined,
      ]),
      proposer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      quorum: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      snapshotBlockNumber: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      startTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "CANCELLED",
          "SUCCEEDED",
          "DEFEATED",
          "ACTIVE",
          "PENDING",
          "QUEUED",
          "EXECUTED",
          "CLOSED",
        ] as const),
        undefined,
      ]),
      unformattedProposalData: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetProposalByIdResponseSnapshotProposalDataMock = (
  overrideResponse: Partial<SnapshotProposalData> = {},
): SnapshotProposalData => ({
  ...{
    createdTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    endTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    link: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    scores: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    startTimestamp: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    state: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["ACTIVE", "CLOSED", "PENDING"] as const),
      undefined,
    ]),
    title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    votes: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseStandardProposalDataMock = (
  overrideResponse: Partial<StandardProposalData> = {},
): StandardProposalData => ({
  ...{
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        executionData: faker.helpers.arrayElement([
          {
            budgetTokensSpent: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            calldata: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            description: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            functionArgsName: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                functionArgs: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => faker.word.sample()),
                  undefined,
                ]),
                functionName: faker.helpers.arrayElement([
                  faker.word.sample(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            signatures: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            targets: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            values: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseApprovalProposalDataMock = (
  overrideResponse: Partial<ApprovalProposalData> = {},
): ApprovalProposalData => ({
  ...{
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        budgetTokensSpent: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        executionData: faker.helpers.arrayElement([
          {
            budgetTokensSpent: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            calldata: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            description: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
            functionArgsName: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                functionArgs: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => faker.word.sample()),
                  undefined,
                ]),
                functionName: faker.helpers.arrayElement([
                  faker.word.sample(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            signatures: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            targets: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            values: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
    proposalSettings: faker.helpers.arrayElement([
      {
        budgetAmount: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        budgetToken: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        criteria: faker.helpers.arrayElement([
          faker.helpers.arrayElement(["THRESHOLD", "TOP_CHOICES"] as const),
          undefined,
        ]),
        criteriaValue: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        maxApprovals: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      },
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseOptimisticProposalDataMock = (
  overrideResponse: Partial<OptimisticProposalData> = {},
): OptimisticProposalData => ({
  ...{
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    executionData: faker.helpers.arrayElement([
      {
        budgetTokensSpent: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        calldata: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        functionArgsName: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            functionArgs: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.word.sample()),
              undefined,
            ]),
            functionName: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        signatures: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        targets: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
        values: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.word.sample()),
          undefined,
        ]),
      },
      undefined,
    ]),
    votingStrategy: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VotingStrategy)),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseSnapshotProposalResultsMock = (
  overrideResponse: Partial<SnapshotProposalResults> = {},
): SnapshotProposalResults => ({
  ...{
    scores: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["pending", "active", "closed"] as const),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseStandardProposalResultsMock = (
  overrideResponse: Partial<StandardProposalResults> = {},
): StandardProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseApprovalProposalResultsMock = (
  overrideResponse: Partial<ApprovalProposalResults> = {},
): ApprovalProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    criteria: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["THRESHOLD", "TOP_CHOICES"] as const),
      undefined,
    ]),
    criteriaValue: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    options: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        option: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        votes: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      })),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseOptimisticProposalResultsMock = (
  overrideResponse: Partial<OptimisticProposalResults> = {},
): OptimisticProposalResults => ({
  ...{
    abstain: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    against: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    for: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  },
  ...overrideResponse,
});

export const getGetProposalByIdResponseMock = (
  overrideResponse: Partial<Proposal> = {},
): Proposal => ({
  approvalThreshold: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  cancelledTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  cancelledTransactionHash: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  createdTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  createdTransactionHash: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  endTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  executedTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  executedTransactionHash: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  markdowntitle: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  proposalData: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      { ...getGetProposalByIdResponseSnapshotProposalDataMock() },
      { ...getGetProposalByIdResponseStandardProposalDataMock() },
      { ...getGetProposalByIdResponseApprovalProposalDataMock() },
      { ...getGetProposalByIdResponseOptimisticProposalDataMock() },
    ]),
    undefined,
  ]),
  proposalResults: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      { ...getGetProposalByIdResponseSnapshotProposalResultsMock() },
      { ...getGetProposalByIdResponseStandardProposalResultsMock() },
      { ...getGetProposalByIdResponseApprovalProposalResultsMock() },
      { ...getGetProposalByIdResponseOptimisticProposalResultsMock() },
    ]),
    undefined,
  ]),
  proposalTemplate: faker.helpers.arrayElement([
    {
      approvalThreshold: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      contractAddress: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      createBlock: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      proposalTemplateId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      quorum: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      votingStrategy: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VotingStrategy)),
        undefined,
      ]),
    },
    undefined,
  ]),
  proposalType: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "STANDARD",
      "APPROVAL",
      "OPTIMISTIC",
      "SNAPSHOT",
    ] as const),
    undefined,
  ]),
  proposer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  quorum: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  snapshotBlockNumber: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  startTime: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "CANCELLED",
      "SUCCEEDED",
      "DEFEATED",
      "ACTIVE",
      "PENDING",
      "QUEUED",
      "EXECUTED",
      "CLOSED",
    ] as const),
    undefined,
  ]),
  unformattedProposalData: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetProposalVotesResponseMock = (
  overrideResponse: Partial<GetProposalVotes200> = {},
): GetProposalVotes200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      params: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      proposalId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      proposalTitle: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      proposalType: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "STANDARD",
          "APPROVAL",
          "OPTIMISTIC",
          "SNAPSHOT",
        ] as const),
        undefined,
      ]),
      proposalValue: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      reason: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      support: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(VoteSupport)),
        undefined,
      ]),
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      transactionHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      weight: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDelegateesByAddressResponseMock = (
  overrideResponse: Partial<Delegation> = {},
): Delegation => ({
  allowance: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  amount: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["FULL", "PARTIAL"] as const),
    undefined,
  ]),
  from: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  timestamp: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  to: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  transaction_hash: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["DIRECT", "ADVANCED"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetDelegatorsByAddressResponseMock = (
  overrideResponse: Partial<GetDelegatorsByAddress200> = {},
): GetDelegatorsByAddress200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allowance: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      amount: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["FULL", "PARTIAL"] as const),
        undefined,
      ]),
      from: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      to: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      transaction_hash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["DIRECT", "ADVANCED"] as const),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetGovernorContractResponseMock = (
  overrideResponse: Partial<Contract> = {},
): Contract => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetAlligatorContractResponseMock = (
  overrideResponse: Partial<Contract> = {},
): Contract => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetVotingTokenContractResponseMock = (): VotingToken => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  totalSupply: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  votableSupply: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getGetProjectsResponseMock = (
  overrideResponse: Partial<GetProjects200> = {},
): GetProjects200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  projects: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      applicationCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      applicationId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      contracts: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          deployerAddress: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          deploymentTxHash: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      github: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() =>
          faker.helpers.arrayElement([
            faker.word.sample(),
            {
              age_of_project_years: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              fork_count: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              forked_by_top_devs: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              forked_events: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              fulltime_developer_average_6_months: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              new_contributor_count_6_months: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              repo_rank: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              star_count: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              starred_by_top_devs: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              starred_events: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
            },
          ]),
        ),
        undefined,
      ]),
      grantsAndFunding: faker.helpers.arrayElement([
        {
          grants: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              date: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              grant: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              link: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          revenue: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          ventureFunding: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              year: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        },
        undefined,
      ]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impactStatement: faker.helpers.arrayElement([
        {
          category: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          statement: faker.helpers.arrayElement([
            {
              answer: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              question: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            },
            undefined,
          ]),
          subcategory: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.word.sample()),
            undefined,
          ]),
        },
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organization: faker.helpers.arrayElement([
        {
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          organizationAvatarUrl: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        },
        undefined,
      ]),
      packages: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      pricingModel: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      pricingModelDetails: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      profileAvatarUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      projectCoverImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      projectId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      socialLinks: faker.helpers.arrayElement([
        {
          farcaster: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          mirror: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          twitter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
      team: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRetroFundingRoundsResponseMock = (
  overrideResponse: Partial<GetRetroFundingRounds200> = {},
): GetRetroFundingRounds200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  rounds: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      events: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          status: faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(RetroFundingRoundStatus)),
            undefined,
          ]),
          timestamp: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
        })),
        undefined,
      ]),
      externalLink: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      roundId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRetroFundingRoundByIdResponseMock = (
  overrideResponse: Partial<RetroFundingRound> = {},
): RetroFundingRound => ({
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  events: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(RetroFundingRoundStatus)),
        undefined,
      ]),
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  externalLink: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  roundId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRetroFundingRoundBallotByIdResponseRound5BallotMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  ...{
    address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    category_allocations: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        allocation: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        category_slug: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            "ETHEREUM_CORE_CONTRIBUTIONS",
            "OP_STACK_RESEARCH_AND_DEVELOPMENT",
            "OP_STACK_TOOLING",
          ] as const),
          undefined,
        ]),
        locked: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    distribution_method: faker.helpers.arrayElement([
      faker.word.sample(),
      undefined,
    ]),
    projects_allocations: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        allocation: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        impact: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        position: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        project_id: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    projects_to_be_evaluated: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    published_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    round_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "NOT STARTED",
        "RANKED",
        "PENDING SUBMISSION",
        "SUBMITTED",
      ] as const),
      undefined,
    ]),
    total_projects: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetRetroFundingRoundBallotByIdResponseRound4BallotMock = (
  overrideResponse: Partial<Round4Ballot> = {},
): Round4Ballot => ({
  ...{
    address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    allocations: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        allocation: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        locked: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        metric_id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      })),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    projects_allocation: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        allocation: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        allocations_per_metric: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            allocation: faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              undefined,
            ]),
            metric_id: faker.helpers.arrayElement([
              faker.word.sample(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        is_os: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        project_id: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    published_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    round_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["PENDING", "SUBMITTED"] as const),
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetRetroFundingRoundBallotByIdResponseMock =
  (): GetRetroFundingRoundBallotById200 =>
    faker.helpers.arrayElement([
      { ...getGetRetroFundingRoundBallotByIdResponseRound5BallotMock() },
      { ...getGetRetroFundingRoundBallotByIdResponseRound4BallotMock() },
    ]);

export const getUpdateRetroFundingBallotOSOnlyResponseMock = (
  overrideResponse: Partial<Round4Ballot> = {},
): Round4Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      metric_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  projects_allocation: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allocations_per_metric: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          allocation: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          metric_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      is_os: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["PENDING", "SUBMITTED"] as const),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getSubmitRetroFundingBallotResponseMock = (
  overrideResponse: Partial<SubmitRetroFundingBallot200> = {},
): SubmitRetroFundingBallot200 => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  created_at: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  payload: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  round: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  signature: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  updated_at: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetRetroFundingRoundProjectsResponseMock = (
  overrideResponse: Partial<GetRetroFundingRoundProjects200> = {},
): GetRetroFundingRoundProjects200 => ({
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  projects: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      applicationCategory: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      applicationId: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      contracts: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          deployerAddress: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          deploymentTxHash: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      github: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() =>
          faker.helpers.arrayElement([
            faker.word.sample(),
            {
              age_of_project_years: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              fork_count: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              forked_by_top_devs: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              forked_events: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              fulltime_developer_average_6_months: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              new_contributor_count_6_months: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              repo_rank: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              star_count: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              starred_by_top_devs: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              starred_events: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
            },
          ]),
        ),
        undefined,
      ]),
      grantsAndFunding: faker.helpers.arrayElement([
        {
          grants: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              date: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              grant: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              link: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          revenue: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          ventureFunding: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              amount: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              details: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              year: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        },
        undefined,
      ]),
      id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impactStatement: faker.helpers.arrayElement([
        {
          category: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          statement: faker.helpers.arrayElement([
            {
              answer: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              question: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            },
            undefined,
          ]),
          subcategory: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.word.sample()),
            undefined,
          ]),
        },
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organization: faker.helpers.arrayElement([
        {
          description: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          organizationAvatarUrl: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        },
        undefined,
      ]),
      packages: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      pricingModel: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      pricingModelDetails: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      profileAvatarUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      projectCoverImageUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      projectId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      socialLinks: faker.helpers.arrayElement([
        {
          farcaster: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          mirror: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          twitter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
      team: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRetroFundingRoundProjectByIdResponseMock = (
  overrideResponse: Partial<Project> = {},
): Project => ({
  applicationCategory: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  applicationId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  contracts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      chainId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      deployerAddress: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      deploymentTxHash: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  github: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() =>
      faker.helpers.arrayElement([
        faker.word.sample(),
        {
          age_of_project_years: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          fork_count: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          forked_by_top_devs: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          forked_events: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          fulltime_developer_average_6_months: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          new_contributor_count_6_months: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          repo_rank: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          star_count: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          starred_by_top_devs: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          starred_events: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
        },
      ]),
    ),
    undefined,
  ]),
  grantsAndFunding: faker.helpers.arrayElement([
    {
      grants: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          amount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          date: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          details: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          grant: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          link: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
      revenue: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          amount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          details: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
      ventureFunding: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          amount: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          details: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          year: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  impactStatement: faker.helpers.arrayElement([
    {
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      statement: faker.helpers.arrayElement([
        {
          answer: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          question: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        },
        undefined,
      ]),
      subcategory: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
    },
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  organization: faker.helpers.arrayElement([
    {
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      organizationAvatarUrl: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
    },
    undefined,
  ]),
  packages: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  pricingModel: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  pricingModelDetails: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  profileAvatarUrl: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projectCoverImageUrl: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projectId: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  socialLinks: faker.helpers.arrayElement([
    {
      farcaster: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      mirror: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      twitter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      website: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  team: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddImpactMetricToRetroFundingBallotResponseMock = (
  overrideResponse: Partial<Round4Ballot> = {},
): Round4Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      metric_id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  projects_allocation: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allocations_per_metric: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          allocation: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          metric_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      is_os: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["PENDING", "SUBMITTED"] as const),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingRoundProjectsResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingRoundProjectAllocationResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingRoundProjectImpactResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingRoundProjectPositionResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingRoundCategoryAllocationResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRetroFundingBallotDistributionMethodResponseMock = (
  overrideResponse: Partial<Round5Ballot> = {},
): Round5Ballot => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category_slug: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "ETHEREUM_CORE_CONTRIBUTIONS",
          "OP_STACK_RESEARCH_AND_DEVELOPMENT",
          "OP_STACK_TOOLING",
        ] as const),
        undefined,
      ]),
      locked: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  distribution_method: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  projects_allocations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      impact: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      position: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  projects_to_be_evaluated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  published_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  round_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "NOT STARTED",
      "RANKED",
      "PENDING SUBMISSION",
      "SUBMITTED",
    ] as const),
    undefined,
  ]),
  total_projects: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetImpactMetricsOnRetroFundingRoundResponseMock =
  (): RetroFundingImpactMetric[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      added_to_ballot: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      allocations_per_project: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          allocation: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          is_os: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          project_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      comments: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          comment_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          created_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          updated_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          votes: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              comment_id: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
              created_at: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split(".")[0]}Z`,
                undefined,
              ]),
              updated_at: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split(".")[0]}Z`,
                undefined,
              ]),
              vote: faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                undefined,
              ]),
              voter: faker.helpers.arrayElement([
                faker.word.sample(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          votes_count: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
        })),
        undefined,
      ]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      metric_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      url: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      views: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    }));

export const getGetImpactMetricOnRetroFundingRoundResponseMock = (
  overrideResponse: Partial<RetroFundingImpactMetric> = {},
): RetroFundingImpactMetric => ({
  added_to_ballot: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  allocations_per_project: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      allocation: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      image: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      is_os: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      project_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  comments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      votes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          comment_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          created_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          updated_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          vote: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
      votes_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  metric_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  url: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  views: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRecordImpactMetricViewResponseMock = (
  overrideResponse: Partial<RecordImpactMetricView200> = {},
): RecordImpactMetricView200 => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  impact_metric_id: faker.helpers.arrayElement([
    faker.word.sample(),
    undefined,
  ]),
  ts: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetImpactMetricCommentsResponseMock = (
  overrideResponse: Partial<GetImpactMetricComments200> = {},
): GetImpactMetricComments200 => ({
  data: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      votes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          comment_id: faker.helpers.arrayElement([
            faker.word.sample(),
            undefined,
          ]),
          created_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          updated_at: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            undefined,
          ]),
          vote: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        })),
        undefined,
      ]),
      votes_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      has_next: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      next_offset: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      total_returned: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutImpactMetricCommentResponseMock = (
  overrideResponse: Partial<Comment> = {},
): Comment => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      vote: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  votes_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetImpactMetricCommentResponseMock = (
  overrideResponse: Partial<Comment> = {},
): Comment => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      vote: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  votes_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateImpactMetricCommentResponseMock = (
  overrideResponse: Partial<Comment> = {},
): Comment => ({
  address: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      vote: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  votes_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetImpactMetricCommentVoteResponseMock = (): CommentVote[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    updated_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    vote: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getPutImactMetricCommentVoteResponseMock = (
  overrideResponse: Partial<CommentVote> = {},
): CommentVote => ({
  comment_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  vote: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  voter: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetSpecMockHandler = () => {
  return http.get("*/spec", async () => {
    await delay(1000);
    return new HttpResponse(getGetSpecResponseMock(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getGetNonceMockHandler = () => {
  return http.get("*/auth/nonce", async () => {
    await delay(1000);
    return new HttpResponse(getGetNonceResponseMock(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getPostSiweVerificationMessageMockHandler = (
  overrideResponse?:
    | AuthToken
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AuthToken> | AuthToken),
) => {
  return http.post("*/auth/verify", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostSiweVerificationMessageResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetDelegatesMockHandler = (
  overrideResponse?:
    | GetDelegates200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetDelegates200> | GetDelegates200),
) => {
  return http.get("*/delegates", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDelegatesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetDelegateByAddressMockHandler = (
  overrideResponse?:
    | Delegate
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Delegate> | Delegate),
) => {
  return http.get("*/delegates/:addressOrEnsName", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDelegateByAddressResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetDelegateVotesMockHandler = (
  overrideResponse?:
    | GetDelegateVotes200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetDelegateVotes200> | GetDelegateVotes200),
) => {
  return http.get("*/delegates/:addressOrEnsName/votes", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDelegateVotesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetProposalsMockHandler = (
  overrideResponse?:
    | GetProposals200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProposals200> | GetProposals200),
) => {
  return http.get("*/proposals", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProposalsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetProposalByIdMockHandler = (
  overrideResponse?:
    | Proposal
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Proposal> | Proposal),
) => {
  return http.get("*/proposals/:proposalId", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProposalByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetProposalVotesMockHandler = (
  overrideResponse?:
    | GetProposalVotes200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProposalVotes200> | GetProposalVotes200),
) => {
  return http.get("*/proposals/:proposalId/votes", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProposalVotesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetDelegateesByAddressMockHandler = (
  overrideResponse?:
    | Delegation
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Delegation> | Delegation),
) => {
  return http.get("*/delegates/:addressOrEnsName/delegatees", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDelegateesByAddressResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetDelegatorsByAddressMockHandler = (
  overrideResponse?:
    | GetDelegatorsByAddress200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetDelegatorsByAddress200> | GetDelegatorsByAddress200),
) => {
  return http.get("*/delegates/:addressOrEnsName/delegators", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDelegatorsByAddressResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetGovernorContractMockHandler = (
  overrideResponse?:
    | Contract
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Contract> | Contract),
) => {
  return http.get("*/contracts/governor", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetGovernorContractResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAlligatorContractMockHandler = (
  overrideResponse?:
    | Contract
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Contract> | Contract),
) => {
  return http.get("*/contracts/alligator", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAlligatorContractResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetVotingTokenContractMockHandler = (
  overrideResponse?:
    | VotingToken
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<VotingToken> | VotingToken),
) => {
  return http.get("*/contracts/token", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetVotingTokenContractResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetProjectsMockHandler = (
  overrideResponse?:
    | GetProjects200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProjects200> | GetProjects200),
) => {
  return http.get("*/projects", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProjectsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetRetroFundingRoundsMockHandler = (
  overrideResponse?:
    | GetRetroFundingRounds200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetRetroFundingRounds200> | GetRetroFundingRounds200),
) => {
  return http.get("*/retrofunding/rounds", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRetroFundingRoundsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetRetroFundingRoundByIdMockHandler = (
  overrideResponse?:
    | RetroFundingRound
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RetroFundingRound> | RetroFundingRound),
) => {
  return http.get("*/retrofunding/rounds/:roundId", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRetroFundingRoundByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetRetroFundingRoundBallotByIdMockHandler = (
  overrideResponse?:
    | GetRetroFundingRoundBallotById200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetRetroFundingRoundBallotById200>
        | GetRetroFundingRoundBallotById200),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetRetroFundingRoundBallotByIdResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingBallotOSOnlyMockHandler = (
  overrideResponse?:
    | Round4Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round4Ballot> | Round4Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/osOnly/:osOnly",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingBallotOSOnlyResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getSubmitRetroFundingBallotMockHandler = (
  overrideResponse?:
    | SubmitRetroFundingBallot200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SubmitRetroFundingBallot200> | SubmitRetroFundingBallot200),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/submit",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSubmitRetroFundingBallotResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getGetRetroFundingRoundProjectsMockHandler = (
  overrideResponse?:
    | GetRetroFundingRoundProjects200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetRetroFundingRoundProjects200>
        | GetRetroFundingRoundProjects200),
) => {
  return http.get("*/retrofunding/rounds/:roundId/projects", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRetroFundingRoundProjectsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetRetroFundingRoundProjectByIdMockHandler = (
  overrideResponse?:
    | Project
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Project> | Project),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/projects/:projectId",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetRetroFundingRoundProjectByIdResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getAddImpactMetricToRetroFundingBallotMockHandler = (
  overrideResponse?:
    | Round4Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round4Ballot> | Round4Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/impactMetrics",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAddImpactMetricToRetroFundingBallotResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingRoundProjectsMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/projects",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingRoundProjectsResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingRoundProjectAllocationMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/projects/:projectId/allocation/:allocation",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingRoundProjectAllocationResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingRoundProjectImpactMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/projects/:projectId/impact/:impact",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingRoundProjectImpactResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingRoundProjectPositionMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/projects/:projectId/position/:position",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingRoundProjectPositionResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingRoundCategoryAllocationMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/categories",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingRoundCategoryAllocationResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateRetroFundingBallotDistributionMethodMockHandler = (
  overrideResponse?:
    | Round5Ballot
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Round5Ballot> | Round5Ballot),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/distribution_method/:distributionMethod",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateRetroFundingBallotDistributionMethodResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getRemoveImpactMetricFromRetroFundingBallotMockHandler = () => {
  return http.delete(
    "*/retrofunding/rounds/:roundId/ballots/:addressOrEnsName/impactMetrics/:impactMetricId",
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      });
    },
  );
};

export const getGetImpactMetricsOnRetroFundingRoundMockHandler = (
  overrideResponse?:
    | RetroFundingImpactMetric[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RetroFundingImpactMetric[]> | RetroFundingImpactMetric[]),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/impactMetrics",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetImpactMetricsOnRetroFundingRoundResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getGetImpactMetricOnRetroFundingRoundMockHandler = (
  overrideResponse?:
    | RetroFundingImpactMetric
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RetroFundingImpactMetric> | RetroFundingImpactMetric),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetImpactMetricOnRetroFundingRoundResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getRecordImpactMetricViewMockHandler = (
  overrideResponse?:
    | RecordImpactMetricView200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RecordImpactMetricView200> | RecordImpactMetricView200),
) => {
  return http.post(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/:addressOrEnsName",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRecordImpactMetricViewResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getGetImpactMetricCommentsMockHandler = (
  overrideResponse?:
    | GetImpactMetricComments200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetImpactMetricComments200> | GetImpactMetricComments200),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetImpactMetricCommentsResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getPutImpactMetricCommentMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Comment> | Comment),
) => {
  return http.put(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPutImpactMetricCommentResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getGetImpactMetricCommentMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Comment> | Comment),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments/:commentId",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetImpactMetricCommentResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getUpdateImpactMetricCommentMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Comment> | Comment),
) => {
  return http.put(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments/:commentId",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateImpactMetricCommentResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getDeleteImpactMetricCommentMockHandler = () => {
  return http.delete(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments/:commentId",
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      });
    },
  );
};

export const getGetImpactMetricCommentVoteMockHandler = (
  overrideResponse?:
    | CommentVote[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CommentVote[]> | CommentVote[]),
) => {
  return http.get(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments/:commentId/votes",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetImpactMetricCommentVoteResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};

export const getPutImactMetricCommentVoteMockHandler = (
  overrideResponse?:
    | CommentVote
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<CommentVote> | CommentVote),
) => {
  return http.put(
    "*/retrofunding/rounds/:roundId/impactMetrics/:impactMetricId/comments/:commentId/votes",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPutImactMetricCommentVoteResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};
export const getAgoraSOPAPIBetaMock = () => [
  getGetSpecMockHandler(),
  getGetNonceMockHandler(),
  getPostSiweVerificationMessageMockHandler(),
  getGetDelegatesMockHandler(),
  getGetDelegateByAddressMockHandler(),
  getGetDelegateVotesMockHandler(),
  getGetProposalsMockHandler(),
  getGetProposalByIdMockHandler(),
  getGetProposalVotesMockHandler(),
  getGetDelegateesByAddressMockHandler(),
  getGetDelegatorsByAddressMockHandler(),
  getGetGovernorContractMockHandler(),
  getGetAlligatorContractMockHandler(),
  getGetVotingTokenContractMockHandler(),
  getGetProjectsMockHandler(),
  getGetRetroFundingRoundsMockHandler(),
  getGetRetroFundingRoundByIdMockHandler(),
  getGetRetroFundingRoundBallotByIdMockHandler(),
  getUpdateRetroFundingBallotOSOnlyMockHandler(),
  getSubmitRetroFundingBallotMockHandler(),
  getGetRetroFundingRoundProjectsMockHandler(),
  getGetRetroFundingRoundProjectByIdMockHandler(),
  getAddImpactMetricToRetroFundingBallotMockHandler(),
  getUpdateRetroFundingRoundProjectsMockHandler(),
  getUpdateRetroFundingRoundProjectAllocationMockHandler(),
  getUpdateRetroFundingRoundProjectImpactMockHandler(),
  getUpdateRetroFundingRoundProjectPositionMockHandler(),
  getUpdateRetroFundingRoundCategoryAllocationMockHandler(),
  getUpdateRetroFundingBallotDistributionMethodMockHandler(),
  getRemoveImpactMetricFromRetroFundingBallotMockHandler(),
  getGetImpactMetricsOnRetroFundingRoundMockHandler(),
  getGetImpactMetricOnRetroFundingRoundMockHandler(),
  getRecordImpactMetricViewMockHandler(),
  getGetImpactMetricCommentsMockHandler(),
  getPutImpactMetricCommentMockHandler(),
  getGetImpactMetricCommentMockHandler(),
  getUpdateImpactMetricCommentMockHandler(),
  getDeleteImpactMetricCommentMockHandler(),
  getGetImpactMetricCommentVoteMockHandler(),
  getPutImactMetricCommentVoteMockHandler(),
];
